apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-config
  namespace: default
data:
  VITE_API_URL: "http://backend-service:3000"
  VITE_LOG_FORMAT: "json"
  NODE_ENV: "production"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: backend-config
  namespace: default
data:
  NODE_ENV: "production"
  PORT: "3000"
  DATABASE_URL: "postgresql://postgres:postgres@postgres-service:5432/simple_shop"
  LOG_FORMAT: "json"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: default
data:
  POSTGRES_DB: "simple_shop"
  POSTGRES_USER: "postgres"
  POSTGRES_PASSWORD: "postgres"
  LOG_FORMAT: "json"
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: default
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
spec:
  type: LoadBalancer
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http
  selector:
    app: frontend
---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: default
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: 3000
      protocol: TCP
      name: http
  selector:
    app: backend
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: default
spec:
  type: ClusterIP
  ports:
    - port: 5432
      targetPort: 5432
      protocol: TCP
      name: postgresql
  selector:
    app: postgres
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: default
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
      annotations:
        ad.datadoghq.com/frontend.logs: '[{"source": "vue", "service": "simple-shop-frontend", "format": "json"}]'
        ad.datadoghq.com/frontend.apm.enabled: "true"
        ad.datadoghq.com/frontend.apm.service: "simple-shop-frontend"
        ad.datadoghq.com/frontend.apm.env: "production"
    spec:
      containers:
        - name: frontend
          image: bibbys86/simple-shop-frontend:latest
          ports:
            - containerPort: 80
          envFrom:
            - configMapRef:
                name: frontend-config
          env:
            - name: DD_TRACE_ENABLED
              value: "true"
            - name: DD_SERVICE
              value: "simple-shop-frontend"
            - name: DD_ENV
              value: "production"
            - name: DD_AGENT_HOST
              value: "datadog-agent.datadog.svc.cluster.local"
            - name: DD_TRACE_AGENT_PORT
              value: "8126"
            - name: DD_LOGS_INJECTION
              value: "true"
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "200m"
              memory: "256Mi"
          livenessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 15
            periodSeconds: 20
            timeoutSeconds: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 1
            failureThreshold: 3
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: default
spec:
  replicas: 2
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
      annotations:
        ad.datadoghq.com/backend.logs: '[{"source": "nodejs", "service": "simple-shop-backend", "format": "json"}]'
        ad.datadoghq.com/backend.apm.enabled: "true"
        ad.datadoghq.com/backend.apm.service: "simple-shop-backend"
        ad.datadoghq.com/backend.apm.env: "production"
    spec:
      containers:
        - name: backend
          image: bibbys86/simple-shop-backend:latest
          ports:
            - containerPort: 3000
          envFrom:
            - configMapRef:
                name: backend-config
          env:
            - name: DD_TRACE_ENABLED
              value: "true"
            - name: DD_SERVICE
              value: "simple-shop-backend"
            - name: DD_ENV
              value: "production"
            - name: DD_AGENT_HOST
              value: "datadog-agent.datadog.svc.cluster.local"
            - name: DD_TRACE_AGENT_PORT
              value: "8126"
            - name: DD_LOGS_INJECTION
              value: "true"
          resources:
            requests:
              cpu: "200m"
              memory: "256Mi"
            limits:
              cpu: "500m"
              memory: "512Mi"
          livenessProbe:
            httpGet:
              path: /
              port: 3000
            initialDelaySeconds: 15
            periodSeconds: 20
            timeoutSeconds: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /
              port: 3000
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 1
            failureThreshold: 3
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
      annotations:
        ad.datadoghq.com/postgres.logs: '[{"source": "postgresql", "service": "simple-shop-postgres", "format": "json"}]'
    spec:
      containers:
        - name: postgres
          image: postgres:15
          ports:
            - containerPort: 5432
          envFrom:
            - configMapRef:
                name: postgres-config
          env:
            - name: POSTGRES_HOST_AUTH_METHOD
              value: "trust"
          resources:
            requests:
              cpu: "200m"
              memory: "256Mi"
            limits:
              cpu: "500m"
              memory: "512Mi"
          livenessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - postgres
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - postgres
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 1
            failureThreshold: 3 